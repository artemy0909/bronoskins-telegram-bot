import datetime
import json

import peewee
from aiogram.utils.markdown import hbold, hitalic, hcode, hunderline
from peewee import *

import config
from utils.misc import BASE_DATETIME_FORMAT, BASE_DATE_FORMAT, ru_mobile_number_mask

db = SqliteDatabase(config.DB_FILE)


def select_all(tab_name) -> list:
    return db.execute_sql(f'SELECT * FROM {tab_name}').fetchall()


def encode_args_str(*args):
    return json.dumps(args)


def decode_args_str(args_json):
    return json.loads(args_json)


RUBBLE_STYLE = "RUBBLE_STYLE"


def check_message_size(func):
    def wrapper(*args, **kwargs):
        text = func(*args, **kwargs)
        if len(text) > 4096:
            copy = LongMessageCopy.create(text=text)
            return f"üòî –ò–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º —è –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. \n" \
                   f"–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: /{LongMessageCopy.MODEL_CODE}_{copy.id} "
        else:
            return text

    return wrapper


class BotModel(Model):
    MODEL_NAME = "*MODEL_NAME*"
    MODEL_CODE = "*MODEL_CODE*"
    HOOK_MODELS = ()

    def model_title(self) -> str:
        if "name" in vars(self)["__data__"]:
            return str(self.name)
        return f"{self.MODEL_NAME} ‚Ññ{self._pk}"

    def short_view(self):
        return f"{hunderline(self.model_title())} /{self.MODEL_CODE}_{self._pk}"

    @check_message_size
    def full_view(self, is_admin: bool = False, recursive: int = 0, ref_obj=None):
        MARK = '‚îî'
        text = hbold(self.MODEL_NAME) + f" /{self.MODEL_CODE}_{self._pk}\n"
        data = vars(self)["__data__"]
        for column_meta in self._meta.columns.values():
            item = data[column_meta.name]
            if item is None:
                continue

            if isinstance(column_meta.verbose_name, str):
                line = f"{MARK} {column_meta.verbose_name}: "
            else:
                continue

            if column_meta.help_text:
                format_args = decode_args_str(column_meta.help_text)
                if "rubble" in format_args:
                    if isinstance(column_meta, IntegerField):
                        line += hitalic(f"{item} ‚ÇΩ")
                    else:
                        raise ValueError
                if "for_admins" in format_args and not is_admin:
                    continue
                if "ru_phone" in format_args:
                    if isinstance(column_meta, IntegerField):
                        line += ru_mobile_number_mask(item)
                    else:
                        raise ValueError
                if "percent" in format_args:
                    if isinstance(column_meta, IntegerField):
                        line += hitalic(f"{item / 10} %")
                    else:
                        raise ValueError

            elif isinstance(column_meta, ForeignKeyField):
                obj = column_meta.rel_model.get_by_id(item)
                if obj == ref_obj:
                    continue
                line += obj.short_view()
            elif isinstance(column_meta, CharField):
                line += hitalic(item)
            elif isinstance(column_meta, IntegerField):
                line += hitalic(item)
            elif isinstance(column_meta, FixedCharField):
                line += hcode(item)
            elif isinstance(column_meta, DateTimeField):
                line += hitalic(item.strftime(BASE_DATETIME_FORMAT))
            elif isinstance(column_meta, DateField):
                line += hitalic(item.strftime(BASE_DATE_FORMAT))
            elif isinstance(column_meta, BooleanField):
                if item:
                    line += hunderline("–î–ê")
                else:
                    line += hunderline("–ù–ï–¢")
            else:
                continue

            text += line + "\n"

        if recursive:
            recursive_objects = [[]]

            for i in range(0, recursive):
                if i == 0:
                    for dir_ in dir(self):
                        if "_set" in dir_:
                            attr_ = getattr(self, dir_)
                            if isinstance(attr_, peewee.ModelSelect):
                                for model in attr_:
                                    recursive_objects[0].append(model)
                else:
                    recursive_objects.append([])
                    for model_obj in recursive_objects[i - 1]:
                        for dir_ in dir(model_obj):
                            if "_set" in dir_:
                                attr_ = getattr(model_obj, dir_)
                                if isinstance(attr_, peewee.ModelSelect):
                                    for model in attr_:
                                        recursive_objects[i].append(model)

            if recursive_objects:
                related_objects = [a for b in recursive_objects for a in b]
                text += hbold(f"\n–°–í–Ø–ó–ê–ù–ù–´–ï –ó–ê–ü–ò–°–ò({len(related_objects)}):\n")
                related_objects.sort(key=lambda x: x.datetime if "datetime" in vars(x)["__data__"] else 0)
                for model in related_objects:
                    text += model.full_view(recursive=0, ref_obj=self)
        return text


class DeviceType(BotModel):
    MODEL_NAME = "–¢–∏–ø –¥–µ–≤–∞–π—Å–∞"
    MODEL_CODE = "dt"

    name = CharField(unique=True, max_length=32, verbose_name="–¢–∏–ø")

    class Meta:
        database = db


class DeviceBrand(BotModel):
    MODEL_NAME = "–ë—Ä–µ–Ω–¥"
    MODEL_CODE = "br"

    name = CharField(unique=True, max_length=64, verbose_name="–ò–º—è")

    def model_title(self) -> str: return str(self.name)

    class Meta:
        database = db


class Device(BotModel):
    MODEL_NAME = "–î–µ–≤–∞–π—Å"
    MODEL_CODE = "dv"

    name = CharField(max_length=64, verbose_name="–ú–æ–¥–µ–ª—å")
    brand = ForeignKeyField(DeviceBrand, verbose_name="–ë—Ä–µ–Ω–¥")
    type = ForeignKeyField(DeviceType, verbose_name="–¢–∏–ø")

    def model_title(self) -> str: return f"{self.brand.name} {self.name}"

    class Meta:
        database = db


class CutType(BotModel):
    MODEL_NAME = "–¢–∏–ø —Ä–µ–∑–∞"
    MODEL_CODE = "ct"

    name = CharField(unique=True, max_length=16, verbose_name="–¢–∏–ø")
    res_count = IntegerField(verbose_name="–ö–æ–ª-–≤–æ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã—Ö —Ä–µ–∑–æ–≤")

    class Meta:
        database = db


class MaterialType(BotModel):
    MODEL_NAME = "–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
    MODEL_CODE = "mt"

    name = CharField(unique=True, max_length=64, verbose_name="–¢–∏–ø")

    class Meta:
        database = db


class MaterialVariation(BotModel):
    MODEL_NAME = "–í–∞—Ä–∏–∞–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
    MODEL_CODE = "mv"

    name = CharField(unique=True, max_length=64, verbose_name="–ò–º—è –≤–∞—Ä–∏–∞—Ü–∏–∏")
    first_material = ForeignKeyField(MaterialType, verbose_name="–ü–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")
    second_material = ForeignKeyField(MaterialType, null=True, verbose_name="–í—Ç–æ—Ä–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª")
    abbr = CharField(unique=True, max_length=16, verbose_name="–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ")

    class Meta:
        database = db


class RightLevel(BotModel):
    MODEL_NAME = "–£—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤"
    MODEL_CODE = "rl"

    code = IntegerField(unique=True, verbose_name="–ö–æ–¥")
    name = CharField(unique=True, max_length=32, verbose_name="–ò–º—è")

    class Meta:
        database = db


class Stuff(BotModel):
    MODEL_NAME = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    MODEL_CODE = "st"

    name = CharField(max_length=32, verbose_name="–ò–º—è")
    surname = CharField(max_length=32, verbose_name="–§–∞–º–∏–ª–∏—è")
    access_token = FixedCharField(16, unique=True, verbose_name="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
                                  help_text=encode_args_str("for_admins"))
    right_level = ForeignKeyField(RightLevel, verbose_name="–£—Ä–æ–≤–µ–Ω—å –ø—Ä–∞–≤")
    is_salary_exists = BooleanField(default=True, verbose_name="–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É",
                                    help_text=encode_args_str("for_admins"))
    registration_datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    def model_title(self) -> str: return f"{self.name} {self.surname}"

    class Meta:
        database = db


class EmployeeChange(BotModel):
    MODEL_NAME = "–°–º–µ–Ω–∞"
    MODEL_CODE = "ch"

    salary = IntegerField(default=config.CHANGE_SALARY, help_text=encode_args_str("rubble"))
    open_datetime = DateTimeField(default=datetime.datetime.now)
    close_datetime = DateTimeField(null=True)
    worker = ForeignKeyField(Stuff)

    def model_title(self) -> str: return str(vars(self)["__data__"]["open_datetime"].strftime(BASE_DATE_FORMAT))

    class Meta:
        database = db


class MaterialsInventoryIntake(BotModel):
    MODEL_NAME = "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
    MODEL_CODE = "mi"

    material_type = ForeignKeyField(MaterialType, verbose_name="–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
    size_x_cm = IntegerField(verbose_name="–®–∏—Ä–∏–Ω–∞ –µ–¥. (—Å–º)")
    size_y_cm = IntegerField(verbose_name="–î–ª–∏–Ω–Ω–∞ –µ–¥. (—Å–º)")
    worksheet_count = IntegerField(verbose_name="–ö–æ–ª-–≤–æ —Ä–∞–± –æ–±–ª–∞—Å—Ç–µ–π")
    total_cost = IntegerField(verbose_name="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", help_text=encode_args_str("for_admins", "rubble"))
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class MaterialsInventoryOuttake(BotModel):
    MODEL_NAME = "–°–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
    MODEL_CODE = "mo"

    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    intake = ForeignKeyField(MaterialsInventoryIntake, verbose_name="–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
    worksheet_count = IntegerField(verbose_name="–ö–æ–ª-–≤–æ –µ–¥. —Å–ø–∏—Å–∞–Ω–∏—è")
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class CutVariation(BotModel):
    MODEL_NAME = "–í–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∑–∞"
    MODEL_CODE = "cv"

    name = CharField(max_length=64, verbose_name="–ò–º—è –≤–∞—Ä–∏–∞—Ü–∏–∏")
    cut_type = ForeignKeyField(CutType, verbose_name="–¢–∏–ø")
    device_type = ForeignKeyField(DeviceType, verbose_name="–¢–∏–ø –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    average_area = IntegerField(verbose_name="–°—Ä. —Ä–∞–∑–º–µ—Ä (–º–º¬≤)")

    class Meta:
        database = db


class PriceList(BotModel):
    MODEL_NAME = "–ü—Ä–∞–π—Å"
    MODEL_CODE = "pl"

    cut_variation = ForeignKeyField(CutVariation, verbose_name="–í–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∑–∞")
    material_variation = ForeignKeyField(MaterialVariation, verbose_name="–í–∞—Ä–∏–∞–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    cost = IntegerField(verbose_name="–¶–µ–Ω–∞", help_text=encode_args_str("rubble"))
    guarantee_cost = IntegerField(verbose_name="–¶–µ–Ω–∞ (–≥–∞—Ä–∞–Ω—Ç–∏—è)", help_text=encode_args_str("rubble"))
    salary = IntegerField(verbose_name="–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É", help_text=encode_args_str("rubble"))
    guarantee_salary = IntegerField(verbose_name="–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É (–≥–∞—Ä–∞–Ω—Ç–∏—è)", help_text=encode_args_str("rubble"))

    class Meta:
        database = db


class Login(BotModel):
    MODEL_NAME = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
    MODEL_CODE = "ln"

    telegram_id = IntegerField(primary_key=True, verbose_name="–¢–µ–ª–µ–≥—Ä–∞–º id", help_text=encode_args_str("for_admins"))
    user = ForeignKeyField(Stuff, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

    class Meta:
        database = db


class PaymentType(BotModel):
    MODEL_NAME = "–¢–∏–ø –æ–ø–ª–∞—Ç—ã"
    MODEL_CODE = "pt"
    HOOK_MODELS = ("refund", "guarantee")

    name = CharField(unique=True, max_length=32, verbose_name="–ò–º—è")
    abbr = CharField(unique=True, max_length=16, verbose_name="–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ")
    commission = IntegerField(default=0, verbose_name="–≠–∫–≤–∞–π—Ä–∏–Ω–≥", help_text=encode_args_str("percent", "for_admins"))
    button = CharField(unique=True, max_length=16, help_text=encode_args_str("for_admins"))
    salary = IntegerField(verbose_name="–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫—É",
                          help_text=encode_args_str("rubble"))  # todo –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∏–∫—É

    is_cash = IntegerField(verbose_name="–ö–∞—Å—Å–∞", help_text=encode_args_str("for_admins")) # todo –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–±–µ –±–∞–∑—ã

    class Meta:
        database = db


class ResIncoming(BotModel):
    MODEL_NAME = "–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–µ–∑–æ–≤"
    MODEL_CODE = "ri"

    count = IntegerField(verbose_name="–ö–æ–ª-–≤–æ")
    unit_cost = IntegerField(verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü—ã", help_text=encode_args_str("for_admins", "rubble"))
    datetime = DateTimeField(default=datetime.datetime.now)

    class Meta:
        database = db


class BronoSkin(BotModel):
    MODEL_NAME = "–†–µ–∑"
    MODEL_CODE = "bs"

    device = ForeignKeyField(Device, verbose_name="–î–µ–≤–∞–π—Å")
    cut_variation = ForeignKeyField(CutVariation, verbose_name="–í–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∑–∞")
    material_variation = ForeignKeyField(MaterialVariation, verbose_name="–í–∞—Ä–∏–∞–Ω—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
    res_cost = IntegerField(verbose_name="–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∑", help_text=encode_args_str("for_admins", "rubble"))
    res_count = IntegerField(verbose_name="–†–µ–∑–æ–≤ —Å–ø–∏—Å–∞–Ω–æ")
    material_cost = IntegerField(verbose_name="–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª (–ø—Ä–∏–º.)",
                                 help_text=encode_args_str("for_admins", "rubble"))
    change = ForeignKeyField(EmployeeChange)
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class SkinComment(BotModel):
    MODEL_NAME = "–ö–æ–º–º–µ–Ω—Ç"
    MODEL_CODE = "sc"

    skin = ForeignKeyField(BronoSkin, verbose_name="–ü–ª–µ–Ω–∫–∞")
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    content = CharField(max_length=1024, verbose_name="–ö–æ–º–º–µ–Ω—Ç")
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class Payment(BotModel):
    MODEL_NAME = "–û–ø–ª–∞—Ç–∞"
    MODEL_CODE = "pa"

    skin = ForeignKeyField(BronoSkin, unique=True, verbose_name="–ü–ª–µ–Ω–∫–∞")
    money = IntegerField(verbose_name="–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã", help_text=encode_args_str("rubble"))
    base_cost = IntegerField(verbose_name="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –ø—Ä–∞–π—Å—É", help_text=encode_args_str("rubble"))
    payment_type = ForeignKeyField(PaymentType, verbose_name="–¢–∏–ø –æ–ø–ª–∞—Ç—ã")
    commission = IntegerField(default=0, verbose_name="–≠–∫–≤–∞–π—Ä–∏–Ω–≥", help_text=encode_args_str("percent", "for_admins"))
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    client_number = IntegerField(null=True, verbose_name="–¢–µ–ª. –∫–ª–∏–µ–Ω—Ç–∞", help_text=encode_args_str("ru_phone"))
    worker_salary = IntegerField(verbose_name="–ó–∞—Ä–ø–ª–∞—Ç–∞", help_text=encode_args_str("rubble"))
    change = ForeignKeyField(EmployeeChange)
    warranty_period = DateTimeField(verbose_name="–ì–∞—Ä–∞–Ω—Ç–∏—è –¥–æ")
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class WriteOff(BotModel):
    MODEL_NAME = "–°–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–∞"
    MODEL_CODE = "wf"

    skin = ForeignKeyField(BronoSkin, verbose_name="–°–ø–∏—Å–∞–Ω–Ω—ã–π —Ä–µ–∑")
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    change = ForeignKeyField(EmployeeChange)
    is_material_ruined = BooleanField(verbose_name="–ú–∞—Ç–µ—Ä–∏–∞–ª –∏—Å–ø–æ—Ä—á–µ–Ω/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class DelayedSkin(BotModel):
    MODEL_NAME = "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∑"
    MODEL_CODE = "ds"

    skin = ForeignKeyField(BronoSkin, unique=True, verbose_name="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∑")
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    change = ForeignKeyField(EmployeeChange)
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class Refund(BotModel):
    MODEL_NAME = "–í–æ–∑–≤—Ä–∞—Ç –æ–ø–ª–∞—Ç—ã"
    MODEL_CODE = "re"

    payment = ForeignKeyField(Payment, unique=True, verbose_name="–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞")
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    change = ForeignKeyField(EmployeeChange)
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class Guarantee(BotModel):
    MODEL_NAME = "–ì–∞—Ä–∞–Ω—Ç–∏—è"
    MODEL_CODE = "gu"

    payment = ForeignKeyField(Payment, null=True, verbose_name="–û–ø–ª–∞—Ç–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ä–µ–∑–∞")
    new_skin = ForeignKeyField(BronoSkin, unique=True, verbose_name="–ù–æ–≤—ã–π —Ä–µ–∑")
    worker = ForeignKeyField(Stuff, verbose_name="–°–æ–∑–¥–∞–ª")
    change = ForeignKeyField(EmployeeChange)
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class CustomExpenseType(BotModel):
    name = CharField(unique=True, max_length=64)

    class Meta:
        database = db


class CustomExpense(BotModel):
    expense_type = ForeignKeyField(CustomExpenseType)
    money = IntegerField()
    date = DateField(default=datetime.datetime.today)

    class Meta:
        database = db


class CallbackData(BotModel):
    key = CharField(max_length=8, unique=True, primary_key=True)
    worker = ForeignKeyField(Stuff)
    command = CharField(max_length=32)
    data = CharField(max_length=10240)
    old = BooleanField(default=False)

    class Meta:
        database = db


class LongMessageCopy(BotModel):
    text = CharField(max_length=102400)

    class Meta:
        database = db


class CashWithdrawal(BotModel):  # todo –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∏–∫—É –∏ —Å–∏—Ç–∏
    MODEL_NAME = "–°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö"
    MODEL_CODE = "cw"

    money = IntegerField(verbose_name="–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è", help_text=encode_args_str("rubble"))
    worker = ForeignKeyField(Stuff, verbose_name="–°–Ω—è–ª")
    datetime = DateTimeField(default=datetime.datetime.now, verbose_name="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")

    class Meta:
        database = db


class CurrentChange:
    def __init__(self):
        last_change = EmployeeChange.select().order_by(EmployeeChange.id.desc()).get_or_none()
        if last_change and not last_change.close_datetime:
            self.change = last_change
        else:
            self.change = None

    def open_change(self, worker: Stuff):
        if not worker.is_salary_exists:
            self.change = EmployeeChange.create(worker=worker, salary=0)
        else:
            self.change = EmployeeChange.create(worker=worker)

    def close_change(self):
        if isinstance(self.change, EmployeeChange):
            self.change.close_datetime = datetime.datetime.now()
            self.change.save()
            self.change = None
        else:
            raise ValueError

    def is_opened(self):
        if isinstance(self.change, EmployeeChange):
            return True
        else:
            return False
