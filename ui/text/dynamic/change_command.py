from datetime import datetime

from aiogram.utils.markdown import hbold

from utils.database import EmployeeChange, MaterialType, PaymentType
from utils.manager import User
from utils.misc import MONTH_NAMINGS
from utils.views import get_res_count
from ._samples import material_remnants

BIG_LINE = "________________________"


def change_opened(change: EmployeeChange):
    return f"‚òÄ " + hbold("–°–ú–ï–ù–ê –û–¢–ö–†–´–¢–ê") + f"\n{BIG_LINE}" \
                                            f"\nüë§ {change.worker.short_view()}" \
                                            f"\n–û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–æ–≤: {get_res_count()}"


def change_closed_for_worker(user: User, change: EmployeeChange):
    text = f"üåô " + hbold("–°–ú–ï–ù–ê –ó–ê–ö–†–´–¢–ê") + f"\n{BIG_LINE}\n"
    salary = 0
    res_payed = 0
    if change.worker == user.im:
        salary += change.salary
    payments = change.payment_set
    for payment in payments:
        if payment.worker == user.im:
            res_payed += payment.skin.cut_variation.cut_type.res_count
            salary += payment.worker_salary
    mouth_changes = EmployeeChange.select(). \
        where((EmployeeChange.open_datetime.month == datetime.now().month)
              & (EmployeeChange.open_datetime.year == datetime.now().year))
    month_salary = 0
    for change in mouth_changes:
        if change.worker == user.im:
            month_salary += change.salary
        for payment in change.payment_set:
            if payment.worker == user.im:
                month_salary += payment.worker_salary
    text += f" –ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {salary} ‚ÇΩ\n –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–µ–∑–æ–≤: {res_payed}" \
            f"\n –ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ {MONTH_NAMINGS[datetime.now().month]}: {month_salary} ‚ÇΩ"
    return text


def change_closed_for_admins(change: EmployeeChange):
    text = f"üåô " + hbold("–°–ú–ï–ù–ê –ó–ê–ö–†–´–¢–ê") + f"\n{BIG_LINE}\nüë§ {change.worker.short_view()}\n\n"
    payments = change.payment_set
    refunds = change.refund_set
    write_offs = change.writeoff_set
    delays = change.delayedskin_set
    guarantees = change.guarantee_set
    payed_cuts = 0
    write_off_cuts = 0
    delay_cuts = 0
    guarantee_cuts = 0
    sell_sum = 0
    discount_sum = 0
    extra_sum = 0
    res_production_cost = 0
    material_production_cost = 0
    salary_production_cost = change.salary
    acquiring_commission_cost = 0
    payment_types_sums = {}
    cuts_write_off = 0
    for payment_type in PaymentType.select():
        payment_types_sums[payment_type.name] = 0
    for payment in payments:
        salary_production_cost += payment.worker_salary
        payed_cuts += payment.skin.cut_variation.cut_type.res_count
        cuts_write_off += payment.skin.res_count
        acquiring_commission_cost += payment.money * (payment.commission / 1000)
        sell_sum += payment.base_cost
        if payment.base_cost > payment.money:
            discount_sum += payment.base_cost - payment.money
        else:
            extra_sum += payment.money - payment.base_cost
        res_production_cost += payment.skin.res_cost
        material_production_cost += payment.skin.material_cost
        payment_types_sums[payment.payment_type.name] += payment.money
    refund_sum = 0
    for refund in refunds:
        refund_sum += refund.payment.money
    revenue = sell_sum - discount_sum + extra_sum
    total_cash = revenue - refund_sum
    for write_off in write_offs:
        write_off_cuts += write_off.skin.cut_variation.cut_type.res_count
        cuts_write_off += write_off.skin.res_count
        res_production_cost += write_off.skin.res_cost
        material_production_cost += write_off.skin.material_cost
    for delay in delays:
        delay_cuts += delay.skin.cut_variation.cut_type.res_count
        cuts_write_off += delay.skin.res_count
    for guarantee in guarantees:
        guarantee_cuts += guarantee.new_skin.cut_variation.cut_type.res_count
    cuts_remnants = get_res_count()
    text += hbold("–†–ï–ó–´") + f"\n –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ: {payed_cuts}\n –£—Ç–µ—Ä—è–Ω–Ω—ã–µ: {write_off_cuts}" \
                            f"\n –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: {delay_cuts}\n –ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–µ: {guarantee_cuts}" \
                            f"\n –†–µ–∑–æ–≤ —Å–ø–∏—Å–∞–Ω–æ: {cuts_write_off}\n –û—Å—Ç–∞—Ç–æ–∫ —Ä–µ–∑–æ–≤: {cuts_remnants}\n{BIG_LINE}\n"
    res_material_types = {}
    for material_type in MaterialType.select():
        res_material_types[material_type.name] = 0
    for skin in change.bronoskin_set:
        res_material_types[skin.material_variation.first_material.name] += 1
        if skin.material_variation.second_material:
            res_material_types[skin.material_variation.second_material.name] += 1
    text += hbold("–†–ï–ó–´ –ü–û –ú–ê–¢–ï–†–ò–ê–õ–£") + "\n"
    for key, value in res_material_types.items():
        text += f" {key}: {value}\n"
    text += BIG_LINE + "\n"
    text += material_remnants() + BIG_LINE + "\n"
    text += hbold("–í–ò–î–´ –û–ü–õ–ê–¢–´") + "\n"
    for key, value in payment_types_sums.items():
        text += f" {key}: {value} ‚ÇΩ\n"
    text += BIG_LINE + "\n" + hbold("–ò–¢–û–ì–ò –û–ü–ï–†–ê–¶–ò–ô") + f"\n –ü—Ä–æ–¥–∞–∂–∏: {sell_sum} ‚ÇΩ\n –í–æ–∑–≤—Ä–∞—Ç—ã: {refund_sum} ‚ÇΩ" \
                                                        f"\n –°–∫–∏–¥–∫–∏: {discount_sum} ‚ÇΩ\n –ù–∞–¥–±–∞–≤–∫–∏: {extra_sum} ‚ÇΩ" \
                                                        f"\n –°–º–µ–Ω–Ω—ã–π –∏—Ç–æ–≥: {total_cash} ‚ÇΩ\n"
    text += BIG_LINE + "\n" + hbold("–ú–ê–†–ñ–ê")
    production_expenses = \
        res_production_cost + material_production_cost + salary_production_cost + round(acquiring_commission_cost)
    gross_profit = revenue - production_expenses
    profitability = round(gross_profit / revenue * 100) if revenue != 0 else 0
    text += f"\n –í—ã—Ä—É—á–∫–∞: {revenue} ‚ÇΩ\n –ü—Ä–æ–∏–∑–≤. —Ä–∞—Å—Ö–æ–¥—ã: {production_expenses} ‚ÇΩ" \
            f"\n   –Ω–∞ —Ä–µ–∑—ã: {res_production_cost} ‚ÇΩ\n   –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª: {material_production_cost} ‚ÇΩ" \
            f"\n   –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É: {salary_production_cost} ‚ÇΩ\n   –Ω–∞ —ç–∫–≤–∞–π—Ä–∏–Ω–≥: {round(acquiring_commission_cost)} ‚ÇΩ" \
            f"\n –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit if gross_profit > 0 else 0} ‚ÇΩ\n –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {profitability}%"
    return text
